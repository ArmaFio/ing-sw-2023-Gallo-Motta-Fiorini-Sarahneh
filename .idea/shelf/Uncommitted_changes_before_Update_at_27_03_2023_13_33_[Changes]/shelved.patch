Index: MyShelfie/src/test/java/it/polimi/ingsw/model/ShelfTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.model;\r\n\r\nimport it.polimi.ingsw.model.shelf.Shelf;\r\nimport junit.framework.TestCase;\r\n\r\npublic class ShelfTest extends TestCase {\r\n\r\n    public void testAvaiable_coloumns() {\r\n        Shelf shelf = new Shelf();\r\n        assertTrue(shelf.avaiable_coloumns(3).size() == 6);\r\n        for (int i = 0; i < 6; i++) {\r\n            assertEquals(shelf.avaiable_coloumns(3).get(i), i);\r\n        }\r\n        assertTrue(shelf.avaiable_coloumns(2).size() == 6);\r\n        for (int i = 0; i < 6; i++) {\r\n            assertEquals(shelf.avaiable_coloumns(2).get(i), i);\r\n        }  assertTrue(shelf.avaiable_coloumns(1).size() == 6);\r\n        for (int i = 0; i < 6; i++) {\r\n            assertEquals(shelf.avaiable_coloumns(1).get(i), i);\r\n        }\r\n    }\r\n\r\n    public void testAvaiable_coloumns_full() {\r\n        Shelf shelf = new Shelf();\r\n        Slot[][] m = new Slot[5][6];\r\n        for (int i = 0; i < 5; i++) {\r\n            for (int j = 0; j < 6; j++) {\r\n                m[i][j]= new Slot();\r\n                m[i][j].tile = new Tile();\r\n            }\r\n        }\r\n        shelf.setMatrix(m);\r\n        assertTrue(shelf.avaiable_coloumns(3).size() == 0);\r\n        assertTrue(shelf.avaiable_coloumns(2).size() == 0);\r\n        assertTrue(shelf.avaiable_coloumns(1).size() == 0);\r\n    }\r\n\r\n    public void testGet_max_coloumns() {\r\n    }\r\n\r\n    public void testPut_tiles() {\r\n    }\r\n\r\n    public void testGet_tile() {\r\n    }\r\n\r\n    public void testN_row() {\r\n        Shelf shelf=new Shelf();\r\n        assertEquals(shelf.n_row(),5);\r\n    }\r\n\r\n    public void testN_col() {\r\n        Shelf shelf=new Shelf();\r\n        assertEquals(shelf.n_col(),6);\r\n    }\r\n\r\n    public void testSetMatrix() {\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MyShelfie/src/test/java/it/polimi/ingsw/model/ShelfTest.java b/MyShelfie/src/test/java/it/polimi/ingsw/model/ShelfTest.java
--- a/MyShelfie/src/test/java/it/polimi/ingsw/model/ShelfTest.java	(revision b8a7e84fab6b31706ca514cb6620766cab5dfba3)
+++ b/MyShelfie/src/test/java/it/polimi/ingsw/model/ShelfTest.java	(date 1679916606274)
@@ -1,32 +1,37 @@
 package it.polimi.ingsw.model;
 
 import it.polimi.ingsw.model.shelf.Shelf;
+import it.polimi.ingsw.model.shelf.ShelfSlot;
 import junit.framework.TestCase;
 
+import java.util.ArrayList;
+import java.util.List;
+
 public class ShelfTest extends TestCase {
 
-    public void testAvaiable_coloumns() {
+    public void testAvaiable_coloumns_empty() {
         Shelf shelf = new Shelf();
-        assertTrue(shelf.avaiable_coloumns(3).size() == 6);
-        for (int i = 0; i < 6; i++) {
+        assertTrue(shelf.avaiable_coloumns(3).size() == 5);
+        for (int i = 0; i < 5; i++) {
             assertEquals(shelf.avaiable_coloumns(3).get(i), i);
         }
-        assertTrue(shelf.avaiable_coloumns(2).size() == 6);
-        for (int i = 0; i < 6; i++) {
+        assertTrue(shelf.avaiable_coloumns(2).size() == 5);
+        for (int i = 0; i < 5; i++) {
             assertEquals(shelf.avaiable_coloumns(2).get(i), i);
-        }  assertTrue(shelf.avaiable_coloumns(1).size() == 6);
-        for (int i = 0; i < 6; i++) {
+        }
+        assertTrue(shelf.avaiable_coloumns(1).size() == 5);
+        for (int i = 0; i < 5; i++) {
             assertEquals(shelf.avaiable_coloumns(1).get(i), i);
         }
     }
 
     public void testAvaiable_coloumns_full() {
         Shelf shelf = new Shelf();
-        Slot[][] m = new Slot[5][6];
-        for (int i = 0; i < 5; i++) {
-            for (int j = 0; j < 6; j++) {
-                m[i][j]= new Slot();
-                m[i][j].tile = new Tile();
+        ShelfSlot[][] m = new ShelfSlot[6][5];
+        for (int i = 0; i < 6; i++) {
+            for (int j = 0; j < 5; j++) {
+                m[i][j] = new ShelfSlot();
+                m[i][j].setTile(new Tile(Tile.TileType.CAT));
             }
         }
         shelf.setMatrix(m);
@@ -35,25 +40,127 @@
         assertTrue(shelf.avaiable_coloumns(1).size() == 0);
     }
 
-    public void testGet_max_coloumns() {
-    }
+    public void testAvaiable_coloumns_general() {
+        Shelf shelf = new Shelf();
+        ShelfSlot[][] m = new ShelfSlot[6][5];
+        for (int i = 0; i < 6; i++) {
+            for (int j = 0; j < 5; j++) {
+                m[i][j] = new ShelfSlot();
+            }
+        }
+        for (int i = 0; i < 2; i++) {
+            for (int j = 5; j > 0; j--) {
+                m[j][i].setTile(new Tile(Tile.TileType.CAT));
+            }
+        }
+        for (int i = 2; i < 4; i++) {
+            for (int j = 5; j > 1; j--) {
+                m[j][i].setTile(new Tile(Tile.TileType.CAT));
+            }
+        }
+        for (int i = 4; i < 5; i++) {
+            for (int j = 5; j > 2; j--) {
+                m[j][i].setTile(new Tile(Tile.TileType.CAT));
+            }
+        }
+        shelf.setMatrix(m);
+        ArrayList<Integer> A = new ArrayList<Integer>();
+        ArrayList<Integer> B = new ArrayList<Integer>();
+        ArrayList<Integer> C = new ArrayList<Integer>();
+        A.add(0);
+        A.add(1);
+        A.add(2);
+        A.add(3);
+        A.add(4);
+        B.add(2);
+        B.add(3);
+        B.add(4);
+        C.add(4);
+        assertEquals(C, shelf.avaiable_coloumns(3));
+        assertEquals(shelf.avaiable_coloumns(2), B);
+        assertEquals(shelf.avaiable_coloumns(1), A);
+    }
+
+    public void testGet_max_coloumns_empty() {
+        Shelf shelf = new Shelf();
+        ShelfSlot[][] m = new ShelfSlot[6][5];
+        for (int i = 0; i < 6; i++) {
+            for (int j = 0; j < 5; j++) {
+                m[i][j] = new ShelfSlot();
+            }
+        }
+        shelf.setMatrix(m);
+        assertEquals(shelf.get_max_coloumns(), 3);
+    }
+
+    public void testGet_max_coloumns_full() {
+        Shelf shelf = new Shelf();
+        ShelfSlot[][] m = new ShelfSlot[6][5];
+        for (int i = 0; i < 6; i++) {
+            for (int j = 0; j < 5; j++) {
+                m[i][j] = new ShelfSlot();
+                m[i][j].setTile(new Tile(Tile.TileType.CAT));
+            }
+        }
+        shelf.setMatrix(m);
+        assertEquals(shelf.get_max_coloumns(), 0);
+    }
+
+    public void testGet_max_coloumns_general() {
+        Shelf shelf = new Shelf();
+        ShelfSlot[][] m = new ShelfSlot[6][5];
+        for (int i = 0; i < 6; i++) {
+            for (int j = 0; j < 5; j++) {
+                m[i][j] = new ShelfSlot();
+            }
+        }
+        for (int i = 0; i < 2; i++) {
+            for (int j = 5; j > 0; j--) {
+                m[j][i].setTile(new Tile(Tile.TileType.CAT));
+            }
+        }
+        for (int i = 2; i < 4; i++) {
+            for (int j = 5; j > 1; j--) {
+                m[j][i].setTile(new Tile(Tile.TileType.CAT));
+            }
+        }
+        for (int i = 4; i < 5; i++) {
+            for (int j = 5; j >= 0; j--) {
+                m[j][i].setTile(new Tile(Tile.TileType.CAT));
+            }
+        }
+        shelf.setMatrix(m);
+        assertEquals(2, shelf.get_max_coloumns());
+
+    }
+
 
     public void testPut_tiles() {
-    }
-
-    public void testGet_tile() {
-    }
-
-    public void testN_row() {
-        Shelf shelf=new Shelf();
-        assertEquals(shelf.n_row(),5);
-    }
-
-    public void testN_col() {
-        Shelf shelf=new Shelf();
-        assertEquals(shelf.n_col(),6);
+        Shelf shelf = new Shelf();
+        ShelfSlot[][] m = new ShelfSlot[6][5];
+        ArrayList<Tile> A = new ArrayList<Tile>();
+        for (int i = 0; i < 6; i++) {
+            for (int j = 0; j < 5; j++) {
+                m[i][j] = new ShelfSlot();
+            }
+        }
+        Tile A1 = new Tile(Tile.TileType.CAT);
+        Tile A2 = new Tile(Tile.TileType.FRAME);
+        Tile A3 = new Tile(Tile.TileType.BOOK);
+        A.add(A1);
+        A.add(A2);
+        A.add(A3);
+        shelf.setMatrix(m);
+        shelf.put_tiles(3, A);
+        assertEquals(shelf.getMatrix()[5][3].getTile(), A1);
+        assertEquals(shelf.getMatrix()[4][3].getTile(), A2);
+        assertEquals(shelf.getMatrix()[3][3].getTile(), A3);
+        ArrayList<Tile> B = new ArrayList<Tile>();
+        B.add(A3);
+        B.add(A2);
+        shelf.put_tiles(3,B);
+        assertEquals(A3,shelf.getMatrix()[2][3].getTile());
+        assertEquals(A2,shelf.getMatrix()[1][3].getTile());
     }
 
-    public void testSetMatrix() {
-    }
 }
\ No newline at end of file
Index: MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_11.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.model.commonGoalCards;\r\n\r\nimport it.polimi.ingsw.model.shelf.Shelf;\r\n\r\npublic class CommonGoalCard_11 implements CommonGoalCard {\r\n    private final int id;\r\n    private int n_solved;\r\n\r\n    public CommonGoalCard_11() {\r\n        id = 11;\r\n        n_solved = 0;\r\n    }\r\n\r\n    @Override\r\n    public int check_objective(Shelf s) {\r\n\r\n        for (int i = 1; i < s.N_ROWS - 1; i++) {\r\n            for (int j = 1; j < s.N_COLS - 1; j++) {\r\n                if (s.getTile(i, j).type == s.getTile(i - 1, j - 1).type &&\r\n                        s.getTile(i, j).type == s.getTile(i + 1, j + 1).type &&\r\n                        s.getTile(i, j).type == s.getTile(i - 1, j + 1).type &&\r\n                        s.getTile(i, j).type == s.getTile(i + 1, j - 1).type\r\n                ) {\r\n                    n_solved++;\r\n                    return 8 - 2 * (n_solved - 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_11.java b/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_11.java
--- a/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_11.java	(revision b8a7e84fab6b31706ca514cb6620766cab5dfba3)
+++ b/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_11.java	(date 1679754842109)
@@ -1,4 +1,4 @@
-package it.polimi.ingsw.model.commonGoalCards;
+package it.polimi.ingsw.model.CommonGoalCards;
 
 import it.polimi.ingsw.model.shelf.Shelf;
 
Index: MyShelfie/src/main/java/it/polimi/ingsw/model/Player.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.model;\r\n\r\nimport it.polimi.ingsw.model.shelf.Shelf;\r\n\r\nimport java.lang.String;\r\n\r\npublic class Player {\r\n    private final String username;\r\n    private Shelf shelf;\r\n    private int points;\r\n    private PersonalGoalCard pgc;\r\n\r\n    /**\r\n     * initializes Player from username and Personal Objective\r\n     */\r\n    public Player(String user, PersonalGoalCard po) {\r\n        username = user;\r\n        points = 0;\r\n        pgc = po;\r\n        shelf = new Shelf();\r\n    }\r\n\r\n    /**\r\n     * Upgrades Player's score adding the number of points indicated by the arguments\r\n     */\r\n    public void add_points(int nop) {\r\n        this.points = this.points + nop;\r\n    }\r\n\r\n    /**Returns Player's username*/\r\n    public String getUsername() {\r\n        return username;\r\n    }\r\n\r\n    /**Returns Player's current score*/\r\n    public int getPoints() {\r\n        return points;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MyShelfie/src/main/java/it/polimi/ingsw/model/Player.java b/MyShelfie/src/main/java/it/polimi/ingsw/model/Player.java
--- a/MyShelfie/src/main/java/it/polimi/ingsw/model/Player.java	(revision b8a7e84fab6b31706ca514cb6620766cab5dfba3)
+++ b/MyShelfie/src/main/java/it/polimi/ingsw/model/Player.java	(date 1679837094332)
@@ -4,14 +4,19 @@
 
 import java.lang.String;
 
+/**
+ * @author  Fiorini Armando
+ */
 public class Player {
     private final String username;
-    private Shelf shelf;
+    private final Shelf shelf;
     private int points;
-    private PersonalGoalCard pgc;
+    private final PersonalGoalCard pgc;
 
     /**
-     * initializes Player from username and Personal Objective
+     * contructs the player
+     * @param user username
+     * @param po PersonalGoalcard reference
      */
     public Player(String user, PersonalGoalCard po) {
         username = user;
@@ -22,17 +27,25 @@
 
     /**
      * Upgrades Player's score adding the number of points indicated by the arguments
+     * @param nop number of points to add
      */
+
     public void add_points(int nop) {
         this.points = this.points + nop;
     }
 
-    /**Returns Player's username*/
+    /**
+     *
+     * @return player's username
+     */
     public String getUsername() {
         return username;
     }
 
-    /**Returns Player's current score*/
+    /**
+     *
+     * @return player's current score
+     */
     public int getPoints() {
         return points;
     }
Index: MyShelfie/src/main/java/it/polimi/ingsw/model/shelf/Shelf.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.model.shelf;\r\n\r\nimport it.polimi.ingsw.model.Game;\r\nimport it.polimi.ingsw.model.Tile;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class Shelf {\r\n    public final int N_ROWS = Game.SHELF_ROWS;\r\n    public final int N_COLS = Game.SHELF_COLS;\r\n    private ShelfSlot[][] matrix;//TODO aspettiamo Samuele per la classe ShelfSlot\r\n\r\n    /**\r\n     * Constructs a Shelf\r\n     */\r\n    public Shelf() {\r\n        matrix = new ShelfSlot[6][5];\r\n        for (int i = 0; i < 6; i++) {\r\n            for (int j = 0; j < 5; j++) {\r\n                matrix[i][j] = new ShelfSlot();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**Returns a list containing the indexes of coloumns which can contain the number of tiles in the argument*/\r\n    public List avaiable_coloumns(int ntiles){\r\n        int count=0;\r\n        List<Integer> l= new ArrayList<Integer>();\r\n        for (int i = 0; i < 5; i++) {\r\n            count = 0;\r\n            for (int j = 0, k = 0; j < 6 && k == 0; j++) {\r\n                if (matrix[j][i].getTile() == null)//TODO aspettiamo Samuele per la classe Tile\r\n                    count++;\r\n                else\r\n                    k = 1;\r\n            }\r\n            if (count >= ntiles)\r\n                l.add(i);\r\n        }\r\n        return l;\r\n    }\r\n\r\n    /**Returns the highest number of tiles which can be inserted in the shelf in one turn*/\r\n    public int get_max_coloumns(){\r\n        int max=0, count = 0;\r\n        for (int i = 0, done = 0; i < 5 && done == 0; i++) {\r\n            count = 0;\r\n            for (int j = 0, k = 0; j < 6 && k == 0; j++) {\r\n                if (matrix[j][i].getTile() == null)\r\n                    count++;\r\n                else\r\n                    k = 1;\r\n            }\r\n            if (count > max)\r\n                max = count;\r\n            if (max>=3) {\r\n                max = 3;\r\n                done = 1;\r\n            }\r\n\r\n\r\n        }\r\n        return max;\r\n    }\r\n\r\n    /**Puts the assigned tiles in the coloumn having the assigned index*/\r\n    public void put_tiles (int col, ArrayList<Tile> tiles) {\r\n        for (int i = 5, j = 0; i >= 0 && j == 0; i--) {\r\n            if (matrix[i][col].getTile() == null) {\r\n                for (int k = 0; k < tiles.size(); k++) {\r\n                    matrix[i - k][col].setTile(tiles.get(k));\r\n                }\r\n            }\r\n            j = 1;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Returns the tile contained in the [x][y] shelf's ShelfSlot\r\n     */\r\n    public Tile getTile(int x, int y) {\r\n        return matrix[x][y].getTile();\r\n    }\r\n\r\n\r\n    /**\r\n     * Assigns a new object to the field 'matrix' of the Shelf\r\n     */\r\n    public void setMatrix(ShelfSlot[][] matrix) {\r\n        this.matrix = matrix;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MyShelfie/src/main/java/it/polimi/ingsw/model/shelf/Shelf.java b/MyShelfie/src/main/java/it/polimi/ingsw/model/shelf/Shelf.java
--- a/MyShelfie/src/main/java/it/polimi/ingsw/model/shelf/Shelf.java	(revision b8a7e84fab6b31706ca514cb6620766cab5dfba3)
+++ b/MyShelfie/src/main/java/it/polimi/ingsw/model/shelf/Shelf.java	(date 1679916758133)
@@ -5,7 +5,8 @@
 
 import java.util.ArrayList;
 import java.util.List;
-
+/**
+ * @author Fiorini Armando*/
 public class Shelf {
     public final int N_ROWS = Game.SHELF_ROWS;
     public final int N_COLS = Game.SHELF_COLS;
@@ -71,24 +72,34 @@
                 for (int k = 0; k < tiles.size(); k++) {
                     matrix[i - k][col].setTile(tiles.get(k));
                 }
-            }
-            j = 1;
+                j=1;
+            }
         }
     }
 
 
     /**
-     * Returns the tile contained in the [x][y] shelf's ShelfSlot
+     *
+     * @param x
+     * @param y
+     * @return
      */
+
     public Tile getTile(int x, int y) {
         return matrix[x][y].getTile();
     }
 
 
     /**
-     * Assigns a new object to the field 'matrix' of the Shelf
+     * Assigns a new ShelfSlot matrix object to the field matrix of the Shelf
+     * @param matrix matrix to assign
      */
     public void setMatrix(ShelfSlot[][] matrix) {
         this.matrix = matrix;
     }
+
+    public ShelfSlot[][] getMatrix() {
+        return matrix;
+    }
 }
+
Index: MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_8.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.model.commonGoalCards;\r\n\r\nimport it.polimi.ingsw.model.Game;\r\nimport it.polimi.ingsw.model.shelf.Shelf;\r\n\r\npublic class CommonGoalCard_8 implements CommonGoalCard {\r\n    private final int id;\r\n    private int n_solved;\r\n\r\n    public CommonGoalCard_8() {\r\n        id = 8;\r\n        n_solved = 0;\r\n    }\r\n\r\n    @Override\r\n    public int check_objective(Shelf s) {\r\n        int lines, cont;\r\n        boolean[] present;\r\n\r\n        lines = 0;\r\n        present = new boolean[Game.N_TYPES];\r\n\r\n        for (int i = 0; i < present.length; i++) {\r\n            present[i] = false;\r\n        }\r\n\r\n        for (int i = 0; i < s.N_ROWS; i++) {\r\n            cont = 0;\r\n            for (int j = 0; j < s.N_COLS; j++) {\r\n                if (present[s.getTile(i, j).type.ordinal()]) {\r\n                    cont++;\r\n                } else {\r\n                    present[s.getTile(i, j).type.ordinal()] = true;\r\n                }\r\n            }\r\n\r\n            if (cont <= 3) {\r\n                lines++;\r\n            }\r\n        }\r\n\r\n        if (lines == 4) {\r\n            n_solved++;\r\n            return 8 - 2 * (n_solved - 1);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_8.java b/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_8.java
--- a/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_8.java	(revision b8a7e84fab6b31706ca514cb6620766cab5dfba3)
+++ b/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_8.java	(date 1679754842120)
@@ -1,4 +1,4 @@
-package it.polimi.ingsw.model.commonGoalCards;
+package it.polimi.ingsw.model.CommonGoalCards;
 
 import it.polimi.ingsw.model.Game;
 import it.polimi.ingsw.model.shelf.Shelf;
Index: MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_9.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.model.commonGoalCards;\r\n\r\nimport it.polimi.ingsw.model.Game;\r\nimport it.polimi.ingsw.model.shelf.Shelf;\r\n\r\npublic class CommonGoalCard_9 implements CommonGoalCard {\r\n    private final int id;\r\n    private int n_solved;\r\n\r\n    public CommonGoalCard_9() {\r\n        id = 9;\r\n        n_solved = 0;\r\n    }\r\n\r\n    @Override\r\n    public int check_objective(Shelf s) {\r\n        int lines;\r\n        boolean cond;\r\n        boolean[] present;\r\n\r\n        lines = 0;\r\n        present = new boolean[Game.N_TYPES];\r\n\r\n        for (int i = 0; i < present.length; i++) {\r\n            present[i] = false;\r\n        }\r\n\r\n        for (int i = 0; i < s.N_COLS; i++) {\r\n            cond = true;\r\n            for (int j = 0; j < s.N_ROWS; j++) {\r\n                if (present[s.getTile(j, i).type.value()]) {\r\n                    cond = false;\r\n                }\r\n                present[s.getTile(j, i).type.value()] = true;\r\n            }\r\n\r\n            if (cond) {\r\n                lines++;\r\n            }\r\n        }\r\n\r\n        if (lines == 2) {\r\n            n_solved++;\r\n            return 8 - 2 * (n_solved - 1);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_9.java b/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_9.java
--- a/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_9.java	(revision b8a7e84fab6b31706ca514cb6620766cab5dfba3)
+++ b/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_9.java	(date 1679754842130)
@@ -1,4 +1,4 @@
-package it.polimi.ingsw.model.commonGoalCards;
+package it.polimi.ingsw.model.CommonGoalCards;
 
 import it.polimi.ingsw.model.Game;
 import it.polimi.ingsw.model.shelf.Shelf;
Index: MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_6.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.model.commonGoalCards;\r\n\r\nimport it.polimi.ingsw.model.Game;\r\nimport it.polimi.ingsw.model.shelf.Shelf;\r\n\r\npublic class CommonGoalCard_6 implements CommonGoalCard {\r\n    private final int id;\r\n    private int n_solved;\r\n\r\n    public CommonGoalCard_6() {\r\n        id = 5;\r\n        n_solved = 0;\r\n    }\r\n\r\n    @Override\r\n    public int check_objective(Shelf s) {\r\n        int[] equal;\r\n\r\n        equal = new int[Game.N_TYPES];\r\n\r\n        for (int i = 0; i < s.N_ROWS; i++) {\r\n            for (int j = 0; j < s.N_COLS; j++) {\r\n                equal[s.getTile(i, j).type.value()]++;\r\n            }\r\n        }\r\n\r\n        for (int e : equal) {\r\n            if (e >= 8) {\r\n                n_solved++;\r\n                return 8 - 2 * (n_solved - 1);\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_6.java b/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_6.java
--- a/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_6.java	(revision b8a7e84fab6b31706ca514cb6620766cab5dfba3)
+++ b/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_6.java	(date 1679754842203)
@@ -1,4 +1,4 @@
-package it.polimi.ingsw.model.commonGoalCards;
+package it.polimi.ingsw.model.CommonGoalCards;
 
 import it.polimi.ingsw.model.Game;
 import it.polimi.ingsw.model.shelf.Shelf;
Index: MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_7.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.model.commonGoalCards;\r\n\r\nimport it.polimi.ingsw.model.shelf.Shelf;\r\n\r\npublic class CommonGoalCard_7 implements CommonGoalCard {\r\n    private final int id;\r\n    private int n_solved;\r\n\r\n    public CommonGoalCard_7() {\r\n        id = 7;\r\n        n_solved = 0;\r\n    }\r\n\r\n    @Override\r\n    public int check_objective(Shelf s) {\r\n        boolean diag_a, diag_b, diag_c, diag_d;\r\n\r\n        diag_a = diag_b = diag_c = diag_d = true;\r\n\r\n        for (int i = 0; i < s.N_ROWS; i++) {\r\n            if (s.getTile(0, 0).type != s.getTile(i, i).type) {\r\n                diag_a = false;\r\n            }\r\n            if (s.getTile(0, 1).type != s.getTile(i, i + 1).type) {\r\n                diag_b = false;\r\n            }\r\n            if (s.getTile(0, s.N_COLS).type != s.getTile(i, s.N_COLS - i).type) {\r\n                diag_c = false;\r\n            }\r\n            if (s.getTile(0, s.N_COLS + 1).type != s.getTile(i + 1, s.N_COLS - i).type) {\r\n                diag_d = false;\r\n            }\r\n        }\r\n\r\n        if (diag_a || diag_b || diag_c || diag_d) {\r\n            n_solved++;\r\n            return 8 - 2 * (n_solved - 1);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_7.java b/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_7.java
--- a/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_7.java	(revision b8a7e84fab6b31706ca514cb6620766cab5dfba3)
+++ b/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_7.java	(date 1679754842213)
@@ -1,4 +1,4 @@
-package it.polimi.ingsw.model.commonGoalCards;
+package it.polimi.ingsw.model.CommonGoalCards;
 
 import it.polimi.ingsw.model.shelf.Shelf;
 
Index: MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_4.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.model.commonGoalCards;\r\n\r\nimport it.polimi.ingsw.model.shelf.Shelf;\r\n\r\npublic class CommonGoalCard_4 implements CommonGoalCard {\r\n    private final int id;\r\n    private int n_solved;\r\n\r\n    public CommonGoalCard_4() {\r\n        id = 4;\r\n        n_solved = 0;\r\n    }\r\n\r\n    @Override\r\n    public int check_objective(Shelf s) {\r\n        boolean square = false;\r\n\r\n        for (int i = 0; i < s.N_ROWS && !square; i++) {\r\n            for (int j = 0; j < s.N_COLS && !square; j++) {\r\n                square = true;\r\n                for (int k = 0; k < 2 && i + k < s.N_ROWS; k++) {\r\n                    for (int m = 0; m < 2 && j + m < s.N_COLS; m++) {\r\n                        if (s.getTile(i, j).type != s.getTile(i + k, j + m).type) {\r\n                            square = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (square) {\r\n            n_solved++;\r\n            return 8 - 2 * (n_solved - 1);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_4.java b/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_4.java
--- a/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_4.java	(revision b8a7e84fab6b31706ca514cb6620766cab5dfba3)
+++ b/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_4.java	(date 1679754842192)
@@ -1,4 +1,4 @@
-package it.polimi.ingsw.model.commonGoalCards;
+package it.polimi.ingsw.model.CommonGoalCards;
 
 import it.polimi.ingsw.model.shelf.Shelf;
 
Index: MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_5.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.model.commonGoalCards;\r\n\r\nimport it.polimi.ingsw.model.Game;\r\nimport it.polimi.ingsw.model.shelf.Shelf;\r\n\r\npublic class CommonGoalCard_5 implements CommonGoalCard {\r\n    private final int id;\r\n    private int n_solved;\r\n\r\n    public CommonGoalCard_5() {\r\n        id = 5;\r\n        n_solved = 0;\r\n    }\r\n\r\n    @Override\r\n    public int check_objective(Shelf s) {\r\n        int lines, cont;\r\n        boolean[] present;\r\n\r\n        lines = 0;\r\n        present = new boolean[Game.N_TYPES];\r\n\r\n        for (int i = 0; i < present.length; i++) {\r\n            present[i] = false;\r\n        }\r\n\r\n        for (int i = 0; i < s.N_COLS; i++) {\r\n            cont = 0;\r\n            for (int j = 0; j < s.N_ROWS; j++) {\r\n                if (present[s.getTile(j, i).type.value()]) {\r\n                    cont++;\r\n                } else {\r\n                    present[s.getTile(j, i).type.value()] = true;\r\n                }\r\n            }\r\n\r\n            if (cont <= 3) {\r\n                lines++;\r\n            }\r\n        }\r\n\r\n        if (lines == 3) {\r\n            n_solved++;\r\n            return 8 - 2 * (n_solved - 1);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_5.java b/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_5.java
--- a/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_5.java	(revision b8a7e84fab6b31706ca514cb6620766cab5dfba3)
+++ b/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_5.java	(date 1679754842182)
@@ -1,4 +1,4 @@
-package it.polimi.ingsw.model.commonGoalCards;
+package it.polimi.ingsw.model.CommonGoalCards;
 
 import it.polimi.ingsw.model.Game;
 import it.polimi.ingsw.model.shelf.Shelf;
Index: MyShelfie/src/main/java/it/polimi/ingsw/model/Slot.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MyShelfie/src/main/java/it/polimi/ingsw/model/Slot.java b/MyShelfie/src/main/java/it/polimi/ingsw/model/Slot.java
new file mode 100644
--- /dev/null	(date 1679754842152)
+++ b/MyShelfie/src/main/java/it/polimi/ingsw/model/Slot.java	(date 1679754842152)
@@ -0,0 +1,10 @@
+package it.polimi.ingsw.model;
+
+public class Slot {
+    public Tile tile;
+    public Slot(){};
+
+    public void setTile(Tile tile) {
+        this.tile = tile;
+    }
+}
Index: MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.model.commonGoalCards;\r\n\r\nimport it.polimi.ingsw.model.shelf.Shelf;\r\n\r\npublic class CommonGoalCard_2 implements CommonGoalCard {\r\n    private final int id;\r\n    private int n_solved;\r\n\r\n    public CommonGoalCard_2() {\r\n        id = 2;\r\n        n_solved = 0;\r\n    }\r\n\r\n    @Override\r\n    public int check_objective(Shelf s) {\r\n        int[][] groups;\r\n        int n_groups, cont;\r\n        int[] dim_groups;\r\n\r\n        groups = new int[s.N_ROWS][s.N_COLS];\r\n\r\n        dim_groups = find_groups_dim(s);\r\n\r\n        cont = 0;\r\n        for (int dim : dim_groups) {\r\n            if (dim >= 4) {\r\n                cont++;\r\n            }\r\n        }\r\n\r\n        if (cont == 4) {\r\n            n_solved++;\r\n            return 8 - 2 * (n_solved - 1);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    int find_groups(Shelf s, int[][] groups) {\r\n        int n_groups;\r\n\r\n        n_groups = 0;\r\n\r\n        for (int i = 0; i < s.N_ROWS; i++) {\r\n            for (int j = 0; j < s.N_COLS; j++) {\r\n                if (i - 1 >= 0 && s.getTile(i, j).type == s.getTile(i - 1, j).type) {\r\n                    groups[i][j] = groups[i - 1][j];\r\n                } else if (j - 1 > 0 && s.getTile(i, j).type == s.getTile(i, j - 1).type) {\r\n                    groups[i][j] = groups[1][j - 1];\r\n                } else {\r\n                    n_groups++;\r\n                    groups[i][j] = n_groups;\r\n                }\r\n            }\r\n        }\r\n\r\n        //TODO Controlla se corretto\r\n        for (int i = 0; i < s.N_ROWS; i++) {\r\n            for (int j = 0; j < s.N_COLS; j++) {\r\n                if (i - 1 >= 0 && groups[i][j] != groups[i - 1][j] && s.getTile(i, j).type == s.getTile(i - 1, j).type) {\r\n                    groups[i][j] = groups[i - 1][j];\r\n                } else if (j - 1 >= 0 && groups[i][j] != groups[i][j - 1] && s.getTile(i, j).type == s.getTile(i, j - 1).type) {\r\n                    groups[i][j] = groups[i][j - 1];\r\n                } else if (i + 1 < s.N_ROWS && groups[i][j] != groups[i + 1][j] && s.getTile(i, j).type == s.getTile(i + 1, j).type) {\r\n                    groups[i][j] = groups[i + 1][j];\r\n                } else if (j + 1 < s.N_COLS && groups[i][j] != groups[i][j + 1] && s.getTile(i, j).type == s.getTile(i, j + 1).type) {\r\n                    groups[i][j] = groups[i][j + 1];\r\n                }\r\n            }\r\n        }\r\n\r\n        return n_groups;\r\n    }\r\n\r\n    int[] find_groups_dim(Shelf s) {\r\n        int[][] groups;\r\n        int[] dim_groups;\r\n        int n_groups;\r\n\r\n        groups = new int[s.N_ROWS][s.N_COLS];\r\n\r\n        n_groups = find_groups(s, groups);\r\n\r\n        dim_groups = new int[n_groups];\r\n\r\n        for (int i = 0; i < dim_groups.length; i++) {\r\n            dim_groups[i] = 0;\r\n        }\r\n\r\n        for (int i = 0; i < s.N_ROWS; i++) {\r\n            for (int j = 0; j < s.N_COLS; j++) {\r\n                dim_groups[groups[i][j]]++;\r\n            }\r\n        }\r\n\r\n        return dim_groups;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_2.java b/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_2.java
--- a/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_2.java	(revision b8a7e84fab6b31706ca514cb6620766cab5dfba3)
+++ b/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_2.java	(date 1679754842142)
@@ -1,4 +1,4 @@
-package it.polimi.ingsw.model.commonGoalCards;
+package it.polimi.ingsw.model.CommonGoalCards;
 
 import it.polimi.ingsw.model.shelf.Shelf;
 
Index: MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_3.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.model.commonGoalCards;\r\n\r\nimport it.polimi.ingsw.model.shelf.Shelf;\r\n\r\npublic class CommonGoalCard_3 implements CommonGoalCard {\r\n    private final int id;\r\n    private int n_solved;\r\n\r\n    public CommonGoalCard_3() {\r\n        id = 3;\r\n        n_solved = 0;\r\n    }\r\n\r\n    @Override\r\n    public int check_objective(Shelf s) {\r\n        if (s.getTile(0, 0).type == s.getTile(0, s.N_COLS - 1).type &&\r\n                s.getTile(0, 0).type == s.getTile(s.N_ROWS - 1, s.N_COLS - 1).type &&\r\n                s.getTile(0, 0).type == s.getTile(s.N_ROWS - 1, 0).type\r\n        ) {\r\n            n_solved++;\r\n            return 8 - 2 * (n_solved - 1);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_3.java b/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_3.java
--- a/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_3.java	(revision b8a7e84fab6b31706ca514cb6620766cab5dfba3)
+++ b/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_3.java	(date 1679754842161)
@@ -1,4 +1,4 @@
-package it.polimi.ingsw.model.commonGoalCards;
+package it.polimi.ingsw.model.CommonGoalCards;
 
 import it.polimi.ingsw.model.shelf.Shelf;
 
Index: MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.model.commonGoalCards;\r\n\r\nimport it.polimi.ingsw.model.shelf.Shelf;\r\n\r\npublic class CommonGoalCard_1 implements CommonGoalCard {\r\n    private final int id;\r\n    private int n_solved;\r\n\r\n    public CommonGoalCard_1() {\r\n        id = 1;\r\n        n_solved = 0;\r\n    }\r\n\r\n    @Override\r\n    public int check_objective(Shelf s) {\r\n        int[][] groups;\r\n        int n_groups, cont;\r\n        int[] dim_groups;\r\n\r\n        groups = new int[s.N_ROWS][s.N_COLS];\r\n\r\n        dim_groups = find_groups_dim(s);\r\n\r\n        cont = 0;\r\n        for (int dim : dim_groups) {\r\n            if (dim >= 2) {\r\n                cont++;\r\n            }\r\n        }\r\n\r\n        //TODO < 6 o == 6? Stessa domanda per altri common goals\r\n        if (cont == 6) {\r\n            n_solved++;\r\n            return 8 - 2 * (n_solved - 1);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Given a Shelf returns a matrix containing the number of the group to which the tile in that position belongs\r\n     *\r\n     * @param s      A Shelf object\r\n     * @param groups A matrix that will be modified\r\n     * @return The number of groups\r\n     * @author Gallo Matteo\r\n     */\r\n    private int find_groups(Shelf s, int[][] groups) {\r\n        int n_groups;\r\n\r\n        n_groups = 0;\r\n\r\n        for (int i = 0; i < s.N_ROWS; i++) {\r\n            for (int j = 0; j < s.N_COLS; j++) {\r\n                if (i - 1 >= 0 && s.getTile(i, j).type == s.getTile(i - 1, j).type) {\r\n                    groups[i][j] = groups[i - 1][j];\r\n                } else if (j - 1 > 0 && s.getTile(i, j).type == s.getTile(i, j - 1).type) {\r\n                    groups[i][j] = groups[1][j - 1];\r\n                } else {\r\n                    n_groups++;\r\n                    groups[i][j] = n_groups;\r\n                }\r\n            }\r\n        }\r\n\r\n        //TODO Controlla se corretto\r\n        for (int i = 0; i < s.N_ROWS; i++) {\r\n            for (int j = 0; j < s.N_COLS; j++) {\r\n                if (i - 1 >= 0 && groups[i][j] != groups[i - 1][j] && s.getTile(i, j).type == s.getTile(i - 1, j).type) {\r\n                    groups[i][j] = groups[i - 1][j];\r\n                } else if (j - 1 >= 0 && groups[i][j] != groups[i][j - 1] && s.getTile(i, j).type == s.getTile(i, j - 1).type) {\r\n                    groups[i][j] = groups[i][j - 1];\r\n                } else if (i + 1 < s.N_ROWS && groups[i][j] != groups[i + 1][j] && s.getTile(i, j).type == s.getTile(i + 1, j).type) {\r\n                    groups[i][j] = groups[i + 1][j];\r\n                } else if (j + 1 < s.N_COLS && groups[i][j] != groups[i][j + 1] && s.getTile(i, j).type == s.getTile(i, j + 1).type) {\r\n                    groups[i][j] = groups[i][j + 1];\r\n                }\r\n            }\r\n        }\r\n\r\n        return n_groups;\r\n    }\r\n\r\n    /**\r\n     * Given a Shelf returns the dimension of each group in it\r\n     *\r\n     * @param s A Shelf object\r\n     * @return An array of integer containing the dimensions of each group contained in Shelf\r\n     * @author Gallo Matteo\r\n     */\r\n    private int[] find_groups_dim(Shelf s) {\r\n        int[][] groups;\r\n        int[] dim_groups;\r\n        int n_groups;\r\n\r\n        groups = new int[s.N_ROWS][s.N_COLS];\r\n\r\n        n_groups = find_groups(s, groups);\r\n\r\n        dim_groups = new int[n_groups];\r\n\r\n        for (int i = 0; i < dim_groups.length; i++) {\r\n            dim_groups[i] = 0;\r\n        }\r\n\r\n        for (int i = 0; i < s.N_ROWS; i++) {\r\n            for (int j = 0; j < s.N_COLS; j++) {\r\n                dim_groups[groups[i][j]]++;\r\n            }\r\n        }\r\n\r\n        return dim_groups;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_1.java b/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_1.java
--- a/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_1.java	(revision b8a7e84fab6b31706ca514cb6620766cab5dfba3)
+++ b/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_1.java	(date 1679754842225)
@@ -1,4 +1,4 @@
-package it.polimi.ingsw.model.commonGoalCards;
+package it.polimi.ingsw.model.CommonGoalCards;
 
 import it.polimi.ingsw.model.shelf.Shelf;
 
Index: MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_10.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.model.commonGoalCards;\r\n\r\nimport it.polimi.ingsw.model.Game;\r\nimport it.polimi.ingsw.model.shelf.Shelf;\r\n\r\npublic class CommonGoalCard_10 implements CommonGoalCard {\r\n    private final int id;\r\n    private int n_solved;\r\n\r\n    public CommonGoalCard_10() {\r\n        id = 10;\r\n        n_solved = 0;\r\n    }\r\n\r\n    @Override\r\n    public int check_objective(Shelf s) {\r\n        int lines;\r\n        boolean cond;\r\n        boolean[] present;\r\n\r\n        lines = 0;\r\n        present = new boolean[Game.N_TYPES];\r\n\r\n        for (int i = 0; i < present.length; i++) {\r\n            present[i] = false;\r\n        }\r\n\r\n        for (int i = 0; i < s.N_ROWS; i++) {\r\n            cond = true;\r\n            for (int j = 0; j < s.N_COLS; j++) {\r\n                if (present[s.getTile(i, j).type.value()]) {\r\n                    cond = false;\r\n                }\r\n                present[s.getTile(i, j).type.value()] = true;\r\n            }\r\n\r\n            if (cond) {\r\n                lines++;\r\n            }\r\n        }\r\n\r\n        if (lines == 2) {\r\n            n_solved++;\r\n            return 8 - 2 * (n_solved - 1);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_10.java b/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_10.java
--- a/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_10.java	(revision b8a7e84fab6b31706ca514cb6620766cab5dfba3)
+++ b/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard_10.java	(date 1679754842172)
@@ -1,4 +1,4 @@
-package it.polimi.ingsw.model.commonGoalCards;
+package it.polimi.ingsw.model.CommonGoalCards;
 
 import it.polimi.ingsw.model.Game;
 import it.polimi.ingsw.model.shelf.Shelf;
Index: MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.model.commonGoalCards;\r\n\r\nimport it.polimi.ingsw.model.shelf.Shelf;\r\n\r\ninterface CommonGoalCard {\r\n\r\n    /**\r\n     * Function to calculate the points obtained given a configuration of a player's shelf\r\n     *\r\n     * @param s the {@code Shelf} object of the {@code Player} to calculate the points from\r\n     * @return An integer representing the points earned\r\n     * @author Gallo Matteo\r\n     */\r\n    int check_objective(Shelf s);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard.java b/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard.java
--- a/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard.java	(revision b8a7e84fab6b31706ca514cb6620766cab5dfba3)
+++ b/MyShelfie/src/main/java/it/polimi/ingsw/model/CommonGoalCards/CommonGoalCard.java	(date 1679754842237)
@@ -1,4 +1,4 @@
-package it.polimi.ingsw.model.commonGoalCards;
+package it.polimi.ingsw.model.CommonGoalCards;
 
 import it.polimi.ingsw.model.shelf.Shelf;
 
